# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eEk2wqK__I5WakG9QbIe6WucioGvl8_t
"""

from flask import Flask, render_template, request, jsonify
import tensorflow as tf
import numpy as np

app = Flask(__name__)

# Define the MyCustomMetric class
@tf.keras.utils.register_keras_serializable()
class MyCustomMetric(tf.keras.metrics.Metric):
    def __init__(self, name='my_custom_metric', **kwargs):
        super(MyCustomMetric, self).__init__(name=name, **kwargs)
        self.total = self.add_weight(name='total', initializer='zeros')
        self.count = self.add_weight(name='count', initializer='zeros')

    def update_state(self, y_true, y_pred, sample_weight=None):
        error = tf.abs(y_true - y_pred)
        self.total.assign_add(tf.reduce_sum(error))
        self.count.assign_add(tf.size(error, out_type=tf.float32))

    def result(self):
        return self.total / self.count

    def reset_state(self):
        self.total.assign(0)
        self.count.assign(0)

    def get_config(self):
        return {'name': self.name}

# Load the trained model with the custom metric
with tf.keras.utils.CustomObjectScope({'MyCustomMetric': MyCustomMetric}):
    model = tf.keras.models.load_model('CarPricePrediction.keras')

# Route for the home page
@app.route('/')
def index():
    return render_template('index.html')

# Route for predictions
@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.json
        features = np.array([
            [
                data['years'],
                data['km'],
                data['rating'],
                data['condition'],
                data['economy'],
                data['top_speed'],
                data['hp'],
                data['torque']
            ]
        ])

        test_input = tf.constant(features, dtype=tf.float64)
        prediction = model.predict(test_input)

        if prediction.size == 0:
            return jsonify({'error': 'Prediction returned empty result'})

        # Convert numpy and TensorFlow types to native Python types
        predicted_value = float(prediction[0][0])
        margin_of_error = predicted_value * (17.56103471303923 / 100)

        return jsonify({
            'predicted_value': round(predicted_value, 2),
            'margin_of_error': round(float(margin_of_error), 2)
        })
    except Exception as e:
        print("Error during prediction:", e)
        return jsonify({'error': str(e)})


if __name__ == '__main__':
    app.run(debug=True)